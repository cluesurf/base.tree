
note <Vec for dynamically sized arrays.>

# std::mem::replace(&mut v[3], 42);

# impl<T: Clone, A: Allocator> Vec<T, A>

coat form
  head item, base clone
  head allocator, base allocator

  suit list
    head item
    head allocator

    task resize
      take self
      take size
      take fill

# impl<T: PartialEq, A: Allocator> Vec<T, A> {

coat form
  head item, base equality
  head allocator, base allocator

  suit list
    head item
    head allocator

    task deduplicate
      take self, lock false

# impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A>

coat form
  head item, base clone
  head allocator
    bind base
      like and
        like allocator
        like clone

  suit list
    head item
    head allocator

    wear clone
      task clone
        take self, loan true

# impl<T: Hash, A: Allocator> Hash for Vec<T, A>

coat form
  head item, base hash
  head allocator, base allocator

  suit list
    head item
    head allocator

    wear hash
      task hash
        take self, loan true

# impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A>
#    type Output = I::Output;

coat form
  head item
  head i, base slice-read, like line, like item
  head allocator, base allocator

  form list
    head item
    head allocator

    wear read
      head i
      take output, loan i/output

      task read
        take self, loan true
        take read, like i
        free self/output, loan true

coat form
  head item
  head i, base slice-read, like line, like item
  head allocator, base allocator

  suit list
    head item
    head allocator

    wear read-flex
      head i
      take output, loan i/output

      task read
        take self, flex true
          loan true
        take read, like i
        free self/output, flex true
          loan true

# impl<T, A: Allocator> IntoIterator for Vec<T, A> {
#     type Item = T;
#     type IntoIter = IntoIter<T, A>;

coat form
  head item
  head allocator, base allocator

  suit list
    head item
    head allocator

    wear becoming-iteratable
      take item, like item
      take iterator
        like becoming-iterator
          like item
          like allocator

      task become-iterator
        take self, move true
        free becoming-iterator
          like item
          like allocator

# impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
#     type Item = &'a T;
#     type IntoIter = slice::Iter<'a, T>;

#     fn into_iter(self) -> slice::Iter<'a, T> {
#         self.iter()
#     }
# }

coat form
  time a
  head item
  head allocator, base allocator

  suit list, loan true
    time a
    head item
    head allocator

    wear becoming-iteratable
      take item, loan true
        time a
        like item
      take iterator
        like slice/iterator
          time a
          like item

      task become-iterator
        take self, move true
        free slice/iterator
          time a
          like item

# impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
#     type Item = &'a mut T;
#     type IntoIter = slice::IterMut<'a, T>;

#     fn into_iter(self) -> slice::IterMut<'a, T> {
#         self.iter_mut()
#     }
# }

coat form
  time a
  head item
  head allocator, base allocator

  suit list, loan true
    flex true
    time a
    head item
    head allocator

    wear becoming-iteratable
      take item, loan true
        flex true
        time a
        like item
      take iterator
        like slice/iterator-flex
          time a
          like item

      task become-iterator
        take self, move true
        free slice/iterator-flex
          time a
          like item

# impl<T, A: Allocator> Vec<T, A>

coat form
  head item
  head allocator, base allocator

  suit list
    head item
    head allocator

    task splice
      head r, like range-bounds, like usize
      head i, like becoming-iterable, bind item, base item
      take self, flex true
      take range, like r
      take replace-with, like i
      free splice
        have time
        like i/iterator
        like allocator
